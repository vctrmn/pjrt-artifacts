"""
This file defines Bazel targets for constructing and managing an OCI image named cpu_stripped.
"""

load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@rules_distroless//distroless:defs.bzl", "flatten")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")
load("//utils/bazel/dedup_tar:defs.bzl", "dedupe_tar")

# Create a tarball with symbolic links
tar(
    name = "symlinks",
    mtree = [
        "./usr/bin/sh type=link link=/bin/bash",
        "./bin/sh type=link link=/bin/bash",
        # Noble required
        # "./bin/bash type=link link=/usr/bin/bash",
        "./opt/rocm/ type=link link=/opt/rocm-6.2.0/",
        "./usr/bin/which type=link link=/usr/bin/which.debianutils",
        "./usr/bin/bazel type=link link=/usr/bin/bazelisk",
        # Noble required
        # "./lib/x86_64-linux-gnu/libm.so.6 type=link link=/usr/lib/x86_64-linux-gnu/libm.so.6",
        # "./lib/x86_64-linux-gnu/libmvec.so.1 type=link link=/usr/lib/x86_64-linux-gnu/libmvec.so.1",
        # "./lib/x86_64-linux-gnu/libc.so.6 type=link link=/usr/lib/x86_64-linux-gnu/libc.so.6 ",
        "./usr/bin/python type=link link=/usr/bin/python3",
    ],
)

# List of Ubuntu packages to include in the image
CPU_PACKAGES = [
    "@cpu_ubuntu//autoconf",
    "@cpu_ubuntu//automake",
    "@cpu_ubuntu//build-essential",
    "@cpu_ubuntu//ca-certificates",
    "@cpu_ubuntu//llvm-18",
    "@cpu_ubuntu//clang-18",
    "@cpu_ubuntu//clang-tidy-18",
    "@cpu_ubuntu//lld-18",
    "@cpu_ubuntu//clang-format-18",
    "@cpu_ubuntu//wget",
    "@cpu_ubuntu//zlib1g-dev",
]

# Combine all specified tarballs into one
flatten(
    name = "cpu_packages_amd64",
    tars = [
        "%s/amd64" % package
        for package in CPU_PACKAGES
    ],
)

flatten(
    name = "cpu_packages_arm64",
    tars = [
        "%s/arm64" % package
        for package in CPU_PACKAGES
    ],
)

# Deduplicate files in the combined tarball to reduce its size
dedupe_tar(
    name = "strip_packages_amd64",
    src = ":cpu_packages_amd64",
    strip_directory = 0,
)

dedupe_tar(
    name = "strip_packages_arm64",
    src = ":cpu_packages_arm64",
    strip_directory = 0,
)

# Define an OCI-compliant image
oci_image(
    name = "cpu_stripped_amd64",
    architecture = "amd64",
    env = {
        "MAX_NUM_WORKERS": -1,
        "TERM": "xterm",
    },
    os = "linux",
    tars = [
        "//base/jammy:bazelisk",
        "//base/jammy:cacerts_amd64",
        "//base/jammy:passwd",
        "//base/jammy:group",
        "//base/jammy:packages_amd64",
        ":strip_packages_amd64",
        ":symlinks",
        "//third_party/openxla:openxla_layer_cpu",
    ],
)

oci_image(
    name = "cpu_stripped_arm64",
    architecture = "arm64",
    env = {
        "MAX_NUM_WORKERS": -1,
        "TERM": "xterm",
    },
    os = "linux",
    tars = [
        "//base/jammy:bazelisk",
        "//base/jammy:cacerts_arm64",
        "//base/jammy:passwd",
        "//base/jammy:group",
        "//base/jammy:packages_arm64",
        ":strip_packages_arm64",
        ":symlinks",
        "//third_party/openxla:openxla_layer_cpu",
    ],
)

# Export the OCI image as a tarball
oci_load(
    name = "cpu_stripped_tarball_amd64",
    image = ":cpu_stripped_amd64",
    repo_tags = [
        "distroless/cpu_builder:amd64-latest",
    ],
)

oci_load(
    name = "cpu_stripped_tarball_arm64",
    image = ":cpu_stripped_arm64",
    repo_tags = [
        "distroless/cpu_builder:arm64-latest",
    ],
)
